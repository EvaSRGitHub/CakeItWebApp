@using X.PagedList
@using X.PagedList.Mvc.Core
@using System.Collections.Generic
@using CakeItWebApp.ViewModels.Tutorials

@model IPagedList<TutorialIndexViewModel>

@{
    var currentRating = 0;
    var fullStars = new string((char)9733, currentRating);
    var emptyStars = new string((char)9734, (5 - currentRating));
    var rating = 0;
}

@if (TempData["Rate"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show m-4" role="alert">
        <strong style="font-size:2rem; color: forestgreen">@TempData["Rate"]</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<main class="container">
    <!-- Portfolio Item Heading -->
    <h1 class="my-4">
        Tutorials
    </h1>

    <div class="row justify-content-around">
        @for (int i = 0; i < Model.Count; i++)
        {
            currentRating = (int)Model[i].Rating == 0 ? 0 : (int)Model[i].Rating / Model[i].RatingVotes;

            <div class="col-lg-4 col-sm-6 portfolio-item">
                <div class="card h-100">
                    <div class="embed-responsive embed-responsive-16by9">
                        <video class="embed-responsive-item" controls>
                            <source src="@Model[i].Url" type="video/mp4">
                        </video>
                    </div>
                    <div class="card-body">
                        <h4 class="card-title">
                            @Model[i].Title
                        </h4>
                        <p class="card-text">@Html.Raw(Model[i].Description)</p>

                        <span class="text-warning">
                            @{ 
                                currentRating = (int)Model[i].Rating == 0 ? 0 : (int)Model[i].Rating / Model[i].RatingVotes;
                                fullStars = new string((char)9733, currentRating);
                                emptyStars = new string((char)9734, (5 - currentRating)); }

                            @string.Concat(fullStars, emptyStars)
                        </span>

                        <form asp-controller="Tutorials" asp-action="Rate" method="post" asp-route-tutorialId="@Model[i].Id" class="d-inline ml-5">
                            <input type="number" name="rating" min="1" max="5" value="@rating" class="p-1" style="border-radius: 1px" />
                            <button class="btn btn-warning">Rate</button>
                        </form>
                    </div>

                    @if (this.User.IsInRole("Admin"))
                    {
                        <div class="button-holder d-flex justify-content-around">
                            <a asp-controller="Tutorials" asp-action="Edit" asp-route-id="@Model[i].Id" class="btn btn-info text-white mb-3">Edit</a>
                            <a asp-controller="Tutorials" asp-action="Delete" asp-route-id="@Model[i].Id" class="btn btn-danger text-white mb-3">Delete</a>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    <!-- /.row -->
    <!-- Pagination -->

    @Html.PagedListPager(Model, page => Url.Action("Index", new { page = page }), new X.PagedList.Mvc.Common.PagedListRenderOptionsBase {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
})

</main>


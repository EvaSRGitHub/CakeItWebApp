@using X.PagedList
@using X.PagedList.Mvc.Core

@model IPagedList<CakeItWebApp.ViewModels.Books.BookIndexViewModel>

@{
    var book = Model.Count > 0 ? Model[0] : null;
    var currentRating = 0;
    var fullStars = new string((char)9733, currentRating);
    var emptyStars = new string((char)9734, (5 - currentRating));
    var rating = 0;
}

@if (TempData["Rate"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show m-4" role="alert">
        <strong style="font-size:2rem; color: forestgreen">@TempData["Rate"]</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<main class="container">
    <!-- Page Heading -->
    <h1 class="my-4">
        Cooking Books
    </h1>
    @for (int i = 0; i < Model.Count; i++)
    {
        book = Model[i];
        currentRating = (int)book.Rating == 0 ? 0 : (int)book.Rating / book.RatingVotes;
        <div class="row">
            <div class="col-md-7">
                <img class="img-fluid rounded mb-3 mb-md-0" src="@book.CoverUrl" alt="">
            </div>
            <div class="col-md-5">
                <h3>@book.Title</h3>
                <h5>Author: @book.Author</h5>
                <p><em>@book.Pages pages</em></p>
                <p>@book.Description</p>

                <span class="text-warning">
                    @{
                        currentRating = (int)book.Rating == 0 ? 0 : (int)book.Rating / book.RatingVotes;
                        fullStars = new string((char)9733, currentRating);
                        emptyStars = new string((char)9734, (5 - currentRating)); }

                    @string.Concat(fullStars, emptyStars)
                </span>

                @if (this.User.Identity.IsAuthenticated)
                {
                <div class="mt-2 mb-2 d-flex justify-content-between">
                    <form asp-controller="Books" asp-action="Rate" method="post" asp-route-bookId="@book.Id" class="d-inline">
                        <input type="number" name="rating" min="1" max="5" value="@rating" class="p-1" style="border-radius: 1px" />
                        <button class="btn btn-warning">Rate</button>
                    </form>
                    <a class="btn btn-info align-content-end" asp-controller="Books" asp-action="Download" asp-route-id="@book.Id">Download</a>
                </div>
                }

                @*@if (this.User.IsInRole("Admin"))
                {
                    <div class="button-holder d-flex justify-content-center">
                        <a asp-controller="Books" asp-action="EditBook" asp-route-id="@book.Id" class="btn btn-info text-white mb-3">Edit</a>
                        <a asp-controller="Books" asp-action="DeleteBook" asp-route-id="@book.Id" class="btn btn-danger text-white mb-3">Delete</a>
                    </div>
                }*@
            </div>
        </div>
        <!-- /.row -->
        <hr>
    }

    @Html.PagedListPager(Model, page => Url.Action("Index", new { page = page }), new X.PagedList.Mvc.Common.PagedListRenderOptionsBase {
       LiElementClasses = new string[] { "page-item" },
       PageClasses = new string[] { "page-link" }
})
</main>